// Generated by CoffeeScript 1.12.7
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  I.UploadEmbed = (function() {
    function UploadEmbed(el, opts) {
      var loader;
      this.opts = opts;
      this.embed_swf = bind(this.embed_swf, this);
      this.el = $(el);
      loader = new I.EmbedLoader(this.opts.upload).load();
      loader.done((function(_this) {
        return function(url) {
          _this.el.removeClass("loading");
          _this.iframe = _this.el.find("#game_drop");
          return _this.iframe.attr("src", url);
        };
      })(this));
      loader.fail((function(_this) {
        return function(err) {
          return _this.show_error(err);
        };
      })(this));
      this.embed_swf();
      this.el.dispatch("click", {
        fullscreen_btn: (function(_this) {
          return function(el) {
            var frame;
            frame = $("#game_drop");
            return I.toggle_fullscreen(frame[0]);
          };
        })(this)
      });
    }

    UploadEmbed.prototype.embed_swf = function() {
      var frame;
      if (this.opts.upload.type !== "flash") {
        return;
      }
      frame = this.el.find(".game_frame");
      return swfobject.embedSWF(this.opts.upload.url, "swf_drop", frame.width(), frame.height(), "11.0.0", false, {}, {
        wmode: "direct"
      });
    };

    UploadEmbed.prototype.show_error = function(errors) {
      var loader;
      loader = this.el.find(".game_loading");
      loader.text(errors.join(", "));
      return loader.addClass("has_errors");
    };

    return UploadEmbed;

  })();

}).call(this);
// Generated by CoffeeScript 1.12.7
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  I.EmbedLoader = (function() {
    function EmbedLoader(embed_data) {
      this.embed_data = embed_data;
      this.load = bind(this.load, this);
    }

    EmbedLoader.prototype.load = function() {
      return this._load || (this._load = $.Deferred((function(_this) {
        return function(d) {
          var ping_load_url, ping_time;
          if (_this.embed_data.url) {
            return;
          }
          if (!_this.embed_data.load_url) {
            d.reject(["Can't load file"]);
            return;
          }
          ping_time = 1000;
          ping_load_url = function() {
            if (d.state() !== "pending") {
              return;
            }
            $.get(_this.embed_data.load_url, function(res) {
              if (res.url) {
                d.resolve(res.url);
                return;
              }
              if (res.status === "extracting") {
                setTimeout(function() {
                  ping_time = Math.min(5000, ping_time * 1.2);
                  console.log(ping_time);
                  return ping_load_url();
                }, ping_time);
              }
              if (res.errors) {
                return d.reject(res.errors);
              }
            });
            return true;
          };
          return ping_load_url();
        };
      })(this)));
    };

    return EmbedLoader;

  })();

}).call(this);
